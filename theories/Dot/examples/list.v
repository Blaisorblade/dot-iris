From stdpp Require Import strings.

From D Require Import tactics.
From D.Dot Require Import syn unstampedness_binding.
From D.Dot.typing Require Import typing_unstamped typing_unstamped_derived.
From D.Dot.examples Require Import exampleInfra scalaLib hoas.

Import DBNotation hoasNotation.

Implicit Types (L T U: hty) (Œì : list ty).
 (* (v: vl) (e: tm) (d: dm) (ds: dms) . *)

Definition htrueTm bool := htskip (htproj (htv bool) "true").
Definition hfalseTm bool := htskip (htproj (htv bool) "false").

(* bool : boolImplT *)
(* Let Œì' := boolImplT :: Œì. *)

Lemma trueTyp Œì Œì'' : Œì'' ++ boolImplT :: Œì u‚ä¢‚Çú
  hclose (htrueTm (hx (length Œì''))) : hclose (hpx (length Œì'') @; "Boolean").
Proof.
  have ?: length Œì'' < length (Œì'' ++ boolImplT :: Œì) by rewrite app_length /=; lia.
  rewrite /htrueTm/= -(iterate_S tskip 0).
  apply (Subs_typed (T1 := hclose (‚ñ∂ hpx (length Œì'') @; "Boolean")));
    rewrite /= plusnO; tcrush.
    eapply Subs_typed_nocoerce.
  - eapply TMuE_typed'; first eapply Var_typed'; by [rewrite lookup_app_r ?Nat.sub_diag|].
  - repeat lNext.
Qed.

Lemma falseTyp Œì Œì'' : Œì'' ++ boolImplT :: Œì u‚ä¢‚Çú
  hclose (hfalseTm (hx (length Œì''))) : hclose (hpx (length Œì'') @; "Boolean").
Proof.
  have ?: length Œì'' < length (Œì'' ++ boolImplT :: Œì) by rewrite app_length /=; lia.
  rewrite /hfalseTm /= -(iterate_S tskip 0).
  apply (Subs_typed (T1 := hclose (‚ñ∂ hpx (length Œì'') @; "Boolean")));
    rewrite /= plusnO; tcrush.
  eapply Subs_typed_nocoerce.
  - eapply TMuE_typed'; first eapply Var_typed'; by [rewrite lookup_app_r ?Nat.sub_diag|].
  -
    (* Optional tactic, just for seeing what happens: *)
    lNext; rewrite -(decomp_s _ (ids _ .: ren _)) /=.
    (* Needed: *)
    repeat lNext.
Qed.

Definition hnilV bool : hvl := ŒΩ: self, {@
  type "A" = ‚ä•;
  val "isEmpty" = Œª: _, htrueTm bool;
  val "head" = Œª: _, pureS loopTm;
  val "tail" = Œª: _, pureS loopTm
}.

(*
  Œª(x: {A})Œª(hd: x.A)Œª(tl: sci.List‚àß{A <: x.A}) let result = ŒΩ(self) {
    A = x.A; isEmpty = bool.false; head = hd; tail = tl } in result *)
Program Definition hconsV bool : hvl :=
  Œª: x, Œª:: hd tl, htv $ ŒΩ: self, {@
    type "A" = hpv x @; "T";
    val "isEmpty" = Œª: _, hfalseTm bool;
    val "head" = Œª: _, htv hd;
    val "tail" = Œª: _, htv tl
  }.

Definition hlistTBodyGen bool sci (L U : hty) : hty := Œº: self, {@
  type "A" >: L <: U;
  val "isEmpty" : ‚ä§ ‚Üí: hpv bool @; "Boolean";
  val "head" : ‚ä§ ‚Üí: hpv self @; "A";
  val "tail" : ‚ä§ ‚Üí: hTAnd (hpv sci @; "List") (type "A" >: ‚ä• <: hpv self @; "A" )
}.

Definition hlistTBody bool sci := hlistTBodyGen bool sci ‚ä• ‚ä§.

Definition hlistV bool : hvl := ŒΩ: self, {@
  type "List" = hlistTBody bool self;
  val "nil" = hnilV bool;
  val "cons" = hconsV bool
}.

Definition hnilT sci := hTAnd (‚ñ∂ hpv sci @; "List") (typeEq "A" ‚ä•).

(** ‚àÄ(x: {A})‚àÄ(hd: x.A)‚àÄ(tl: sci.List‚àß{A <: x.A})sci.List‚àß{A <: x.A} *)
Definition hconsT sci : hty :=
  ‚àÄ: x : (tparam "T"),
    hpv x @; "T" ‚Üí:
    (hTAnd (hpv sci @; "List") (type "A" >: ‚ä• <: hpv x @; "T")) ‚Üí:
    hTAnd (hpv sci @; "List") (type "A" >: ‚ä• <: hpv x @; "T").

Definition hlistT bool : hty := Œº: sci, {@
  type "List" >: ‚ä• <: hlistTBody bool sci;
  val "nil" : hnilT sci;
  val "cons" : hconsT sci
}.

Definition hconsTResConcr bool sci U := hlistTBodyGen bool sci U U.

Definition hconsTConcr bool sci : hterm ty :=
  ‚àÄ: x: tparam "T",
    hpv x @; "T" ‚Üí:
      hTAnd (hpv sci @; "List") (type "A" >: ‚ä• <: hpv x @; "T") ‚Üí:
      (hconsTResConcr bool sci (hpv x @; "T")).

Definition hlistTConcrBody bool sci : hty := {@
  typeEq "List" $ hlistTBody bool sci;
  val "nil" : hnilT sci;
  val "cons" : hconsTConcr bool sci
}.

Definition hlistTConcr bool : hty := Œº: sci, hlistTConcrBody bool sci.

Definition hnilTConcr bool sci : hty := hlistTBodyGen bool sci ‚ä• ‚ä•.

Example nilTyp Œì : hclose (‚ñ∂ hlistTConcrBody hx1 hx0) :: boolImplT :: Œì u‚ä¢‚Çú
  hclose (htv (hnilV hx1)) : hclose (hnilT hx0).
Proof.
  apply (Subs_typed_nocoerce $ hclose $ hnilTConcr hx1 hx0).
  - evar (T : ty).
    set L :=  hclose (‚ñ∂ hlistTConcrBody hx1 hx0).
    have := trueTyp Œì [hclose ‚ä§; T; L].
    have := loopTyp (hclose ‚ä§ :: T :: L :: boolImplT :: Œì).
    rewrite {}/T/= => Ht Hl.
    tcrush; apply (Subs_typed_nocoerce (hclose ‚ä•)); cbn; tcrush.
  - tcrush; last (apply Bind1; tcrush).
    ettrans; first eapply TAddLater_stp; stcrush.
    asideLaters.
    eapply LSel_stp'; tcrush. varsub.
    asideLaters.
    lThis. lThis.
Qed.

Example consTyp Œì : hclose (‚ñ∂ hlistTConcrBody hx1 hx0) :: boolImplT :: Œì u‚ä¢‚Çú
  hclose (htv (hconsV hx1)) : hclose (hconsTConcr hx1 hx0).
Proof.
  epose proof falseTyp Œì [_; _; _; _; _; _] as Ht; cbn in Ht.
  tcrush; clear Ht; first by varsub; eapply (LSel_stp' _ (hclose (hp4 @; "T"))); tcrush; varsub; lThis.
  hideCtx. varsub. tcrush. lNext.
  eapply LSel_stp'; tcrush. varsub. lThis.
Qed.

Lemma consTSub Œì : hclose (hlistTConcrBody hx1 hx0) :: boolImplT :: Œì u‚ä¢‚Çú
  hclose (hconsTConcr hx1 hx0), 0 <: hclose (hconsT hx0), 0.
Proof.
  tcrush; rewrite !iterate_S !iterate_0; hideCtx.
  eapply LSel_stp'; tcrush. varsub. tcrush. lThis.
  by lThis.
  apply Bind1; stcrush. by lThis.
Qed.

Example listTypConcr Œì : boolImplT :: Œì u‚ä¢‚Çú hclose (htv (hlistV hx0)) : hclose (hlistTConcr hx0).
Proof.
  have Hn := nilTyp Œì.
  (* Without the call to [dvl_typed], Coq would (smartly) default to [dvabs_typed] *)
  have := consTyp Œì => /(dvl_typed "cons") Hc /=.
  tcrush.
Qed.

Example listTyp Œì : boolImplT :: Œì u‚ä¢‚Çú hclose (htv (hlistV hx0)) : hclose (hlistT hx0).
Proof.
  have Hv := listTypConcr Œì.
  have Hsub := consTSub Œì.
  eapply Subs_typed_nocoerce; first exact Hv; tcrush.
  lThis.
  lNext.
  do 2 lNext; lThis.
Qed.


(** Link lists with booleans. *)

(* Naive attempt; this fails avoidance. *)
(*
Definition clListV := lett (tv boolImpl) (tv listV).
Example clListTyp Œì : Œì u‚ä¢‚Çú clListV : listT.
  eapply Let_typed. apply boolImplTyp.
  Fail change (shift listT) with (listT).
  Fail apply listTyp.
Abort. *)
Definition hvabs' x := htv (hvabs x).
Definition hlett t u := htapp (hvabs' u) t.
Arguments hvabs' /.
Arguments hlett /.
(* Notation "hlett: x := t in u" := (htapp (Œª: x, u) t) (at level 200). *)

(* Try1, working well? *)
Definition clListV' body := hlett (htv (pureS boolImpl)) (Œª bool, hlett (htv (hlistV bool)) (Œª list, pureS body)).
Example clListTyp' Œì (T : ty) body
  (Ht : shift (hclose (hlistT hx0)) :: boolImplT :: Œì u‚ä¢‚Çú body : shift (shift T)) :
  Œì u‚ä¢‚Çú hclose (clListV' body) : T.
Proof.
  eapply Let_typed; first apply boolImplTyp.
  eapply Let_typed; first apply listTyp.
  all: tcrush.
Qed.

Example clListTypNat Œì :
  Œì u‚ä¢‚Çú hclose (clListV' (hclose (htv (hvnat 1)))) : hclose ùêç.
Proof. apply clListTyp'. tcrush. Qed.



(* Try2. Try taking a HOAS body. Works less well. *)

(* Argh. Variable by de Bruijn level. Not good. *)
Definition hxm i : hvl := Œª j, var_vl (j - i).
Definition hxm' i : hvl := ren (Œª j, j - i).
Goal hxm = hxm'. done. Qed.

Definition clListV'2 body := hlett (htv (pureS boolImpl)) (Œª bool, hlett (htv (hlistV bool)) (Œª list, body bool list)).
(* Definition clListV' body := hlett: bool := (htv (pureS boolImpl)), hlett (htv (hlistV bool)) body. *)
Example clListTyp'2 Œì (T : ty) body
  (* (Ht : hclose (hlistT hx1) :: boolImplT :: Œì u‚ä¢‚Çú hclose (body hx1 hx0) : shift (shift T)) : *)
  (Ht : shift (hclose (hlistT hx0)) :: boolImplT :: Œì u‚ä¢‚Çú (body (hxm 1) (hxm 2)) 2 : shift (shift T)) :
  (* (Ht : shift (hclose (hlistT hx0)) :: boolImplT :: Œì u‚ä¢‚Çú hclose (body (hx (-1)) (hx (-2)) 2 : shift (shift T)) : *)
  Œì u‚ä¢‚Çú hclose (clListV'2 body) : T.
Proof.
  eapply Let_typed; first apply boolImplTyp.
  eapply Let_typed; first apply listTyp.
  all: tcrush.
Qed.

Example clListTypNat2 Œì :
  Œì u‚ä¢‚Çú hclose (clListV'2 (Œª _ _, htv (hvnat 1))) : hclose ùêç.
Proof. apply clListTyp'2. tcrush. Qed.

(* Try recursive linking? *)
