From stdpp Require Import strings.

From D Require Import tactics.
From D.Dot Require Import syn exampleInfra unstampedness_binding scalaLib.
From D.Dot.typing Require Import typing_unstamped typing_unstamped_derived.

Import DBNotation.

Implicit Types (L T U: ty) (v: vl) (e: tm) (d: dm) (ds: dms) (Œì : list ty).

Definition trueTm := tskip (tproj (tv x0) "true").
Definition falseTm := tskip (tproj (tv x0) "false").

(* bool : boolImplT *)
(* Let Œì' := boolImplT :: Œì. *)

Lemma trueTyp Œì Œì'' : Œì'' ++ boolImplT :: Œì u‚ä¢‚Çú trueTm.|[ren (+length Œì'')] : p0.|[ren (+length Œì'')] @; "Boolean".
Proof.
  have ?: length Œì'' < length (Œì'' ++ boolImplT :: Œì) by rewrite app_length /=; lia.
  rewrite /trueTm /= -(iterate_S tskip 0).
  apply (Subs_typed (T1 := ‚ñ∂ pv (ids (length Œì'')) @; "Boolean"));
    rewrite plusnO; tcrush.
  eapply Subs_typed_nocoerce.
  - eapply TMuE_typed'; first eapply Var_typed'; by [rewrite lookup_app_r ?Nat.sub_diag|].
  - repeat lNext.
Qed.

Lemma falseTyp Œì Œì'' : Œì'' ++ boolImplT :: Œì u‚ä¢‚Çú falseTm.|[ren (+length Œì'')] : p0.|[ren (+length Œì'')] @; "Boolean".
Proof.
  have ?: length Œì'' < length (Œì'' ++ boolImplT :: Œì) by rewrite app_length /=; lia.
  rewrite /falseTm /= -(iterate_S tskip 0).
  apply (Subs_typed (T1 := ‚ñ∂ pv (ids (length Œì'')) @; "Boolean"));
    rewrite plusnO; tcrush.
  eapply Subs_typed_nocoerce.
  - eapply TMuE_typed'; first eapply Var_typed'; by [rewrite lookup_app_r ?Nat.sub_diag|].
  -
    (* Optional tactic, just for seeing what happens: *)
    lNext; rewrite -(decomp_s _ (ids _ .: ren _)) /=.
    (* Needed: *)
    repeat lNext.
Qed.


Definition nilV : vl := ŒΩ {@ (* self => *)
  type "A" = ‚ä•;
  val "isEmpty" = vabs (* d => *) (trueTm.|[ren (+2)]); (* for self and d *)
  val "head" = vabs loopTm;
  val "tail" = vabs loopTm
}.

(*
  Œª(x: {A})Œª(hd: x.A)Œª(tl: sci.List‚àß{A <: x.A}) let result = ŒΩ(self) {
    A = x.A; isEmpty = bool.false; head = hd; tail = tl } in result *)
Definition consV : vl :=
  vabs (* x => *) $ vabs' (* hd => *) $ vabs' (* tl => *) $ tv $ ŒΩ {@ (* self => *)
    type "A" = p3 @; "T";
    val "isEmpty" = vabs (* d => *) falseTm.|[ren (+5)];
    val "head" = vabs (* d => *) (tv x3);
    val "tail" = vabs (* d => *) (tv x2)
  }.

Definition listTBodyGen L U := Œº {@ (* self => *)
  type "A" >: shift L <: shift U;
  val "isEmpty" : ‚ä§ ‚Üí: p2 @; "Boolean"; (* bool.Boolean *)
  val "head" : ‚ä§ ‚Üí: p0 @; "A"; (* self.A *)
  val "tail" : ‚ä§ ‚Üí: TAnd (p1 @; "List") (type "A" >: ‚ä• <: p0 @; "A" )
}.

Definition listTBody := listTBodyGen ‚ä• ‚ä§.

Definition listV : vl := ŒΩ {@ (* sci => *)
  type "List" = listTBody; (* [shift] is for [sci] *)
  val "nil" = shiftV nilV;
  val "cons" = shiftV consV
}.

Definition nilT sci := TAnd (‚ñ∂ sci @; "List") (typeEq "A" ‚ä•).

(** ‚àÄ(x: {A})‚àÄ(hd: x.A)‚àÄ(tl: sci.List‚àß{A <: x.A})sci.List‚àß{A <: x.A} *)
Definition consT sci : ty :=
  TAll (tparam "T")
    (p0 @; "T" ‚Üí:
    (TAnd (shift sci @; "List") (type "A" >: ‚ä• <: p0 @; "T")) ‚Üí:
    TAnd (shift sci @; "List") (type "A" >: ‚ä• <: p0 @; "T")).

Definition listT : ty := Œº {@ (* sci => *)
  type "List" >: ‚ä• <: listTBody; (* [shift] is for [sci] *)
  val "nil" : nilT p0;
  val "cons" : consT p0
}.

Definition consTResConcr U : ty := listTBodyGen U U.
Definition consTConcr sci : ty :=
  TAll (tparam "T")
    (p0 @; "T" ‚Üí:
      TAnd (shift sci @; "List") (type "A" >: ‚ä• <: p0 @; "T") ‚Üí:
      (* This renaming is needed because I'm inserting a local variable that isn't expected by
      [consTResConcr] *and I'm using it in the argument*. I could also just clone *)
      (consTResConcr (p2 @; "T")).|[ids 1 .: ids 2 .: ids 0 .: ids]).

      (* (consTResConcr (p2 @; "T")).|[‚àû [ids 1 ; ids 2 ; ids 0]]). *)
Definition listTConcrBody : ty := {@ (* sci => *)
  typeEq "List" $ listTBody; (* [shift] is for [sci] *)
  val "nil" : nilT p0;
  val "cons" : consTConcr p0
}.

Definition listTConcr : ty := Œº listTConcrBody.

Definition nilTConcr : ty := listTBodyGen ‚ä• ‚ä•.

Example nilTyp Œì : (‚ñ∂ listTConcrBody)%ty :: boolImplT :: Œì u‚ä¢‚Çú shift (tv nilV) : nilT p0.
Proof.
  apply (Subs_typed_nocoerce nilTConcr).
  - evar (T : ty).
    have := trueTyp Œì [‚ä§; T; ‚ñ∂ listTConcrBody]%ty.
    have := loopTyp (‚ä§ :: T :: ‚ñ∂ listTConcrBody :: boolImplT :: Œì)%ty.
    rewrite {}/T/= => Ht Hl.
    tcrush; apply (Subs_typed_nocoerce ‚ä•); tcrush.
  - tcrush; last (apply Bind1; tcrush).
    eapply Trans_stp; first eapply TAddLater_stp; stcrush.
    asideLaters.
    eapply LSel_stp'; tcrush. varsub.
    asideLaters.
    lThis. lThis.
Qed.

Example consTyp Œì :
  (‚ñ∂ listTConcrBody)%ty :: boolImplT :: Œì u‚ä¢‚Çú shift (tv consV) : consTConcr p0.
Proof.
  epose proof falseTyp Œì [_; _; _; _; _; _] as Ht; cbn in Ht.
  tcrush; clear Ht; first by varsub; eapply (LSel_stp' _ (p4 @; "T")); tcrush; varsub; lThis.
  hideCtx. varsub. tcrush. lNext.
  eapply LSel_stp'; tcrush. varsub. lThis.
Qed.

Lemma consTSub Œì : listTConcrBody :: boolImplT :: Œì u‚ä¢‚Çú consTConcr p0, 0 <: consT p0, 0.
Proof.
  tcrush; rewrite !iterate_S !iterate_0; hideCtx.
  eapply LSel_stp'; tcrush. varsub. tcrush. lThis.
  by lThis.
  apply Bind1; stcrush. by lThis.
Qed.

Example listTypConcr Œì : boolImplT :: Œì u‚ä¢‚Çú tv listV : listTConcr.
Proof.
  have Hn := nilTyp Œì.
  (* Without the call to [dvl_typed], Coq would (smartly) default to [dvabs_typed] *)
  have := consTyp Œì => /(dvl_typed "cons") Hc.
  tcrush.
Qed.

Example listTyp Œì : boolImplT :: Œì u‚ä¢‚Çú tv listV : listT.
Proof.
  have Hv := listTypConcr Œì.
  have Hsub := consTSub Œì.
  apply (Subs_typed_nocoerce listTConcr); tcrush.
  lThis.
  lNext.
  do 2 lNext; lThis.
Qed.


(** Link lists with booleans. *)

(* Naive attempt; this fails avoidance. *)
(*
Definition clListV := lett (tv boolImpl) (tv listV).
Example clListTyp Œì : Œì u‚ä¢‚Çú clListV : listT.
  eapply Let_typed. apply boolImplTyp.
  Fail change (shift listT) with (listT).
  Fail apply listTyp.
Abort. *)

Definition clListV' body := lett (tv boolImpl) $ lett (tv listV) body.
Example clListTyp' Œì T body
  (Ht : shift listT :: boolImplT :: Œì u‚ä¢‚Çú body : shift (shift T)) :
  Œì u‚ä¢‚Çú clListV' body : T.
Proof.
  eapply Let_typed; first apply boolImplTyp.
  eapply Let_typed; first apply listTyp.
  all: tcrush.
Qed.

Example clListTypNat Œì :
  Œì u‚ä¢‚Çú clListV' (tv (vnat 1)) : ùêç.
Proof. apply clListTyp'. tcrush. Qed.

(* Try recursive linking? *)
