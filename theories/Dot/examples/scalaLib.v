From stdpp Require Import strings.

From D Require Import tactics.
From D.Dot Require Import syn exampleInfra hoas.
From D.Dot.typing Require Import typing_unstamped typing_unstamped_derived.
Import DBNotation.

Implicit Types (L T U: ty) (v: vl) (e: tm) (d: dm) (ds: dms) (Œì : list ty).

Notation HashableString := (Œº {@ val "hashCode" : TUnit ‚Üí: TNat }).

Module Export loop.
Import hoasNotation.
(** * Infinite loops *)

Definition hloopDefV : hvl := ŒΩ: self, {@
  val "loop" = hpv (Œª: w, self @: "loop" $: w)
  (* Œª w, self.loop w. *)
}.
Definition hloopDefT : hty := val "loop" : ‚ä§ ‚Üí: ‚ä•.
Definition hloopDefTConcr : hty := Œº: _, {@ hloopDefT }.
Example loopDefTyp Œì : Œì u‚ä¢‚Çú hclose (htv hloopDefV) : hclose hloopDefT.
Proof.
  apply (iT_Sub_nocoerce (hclose hloopDefTConcr)); mltcrush; cbv.
  eapply iT_All_E; last var.
  tcrush; varsub; lookup.
Qed.

Definition hloopFunTm : htm := htv hloopDefV @: "loop".
Example loopFunTyp Œì : Œì u‚ä¢‚Çú hclose hloopFunTm : hclose ‚ä§ ‚Üí: ‚ä•.
Proof. have ? := loopDefTyp Œì; tcrush. Qed.

Definition hloopTm : htm := hloopFunTm $: htv (hvnat 0).
Example loopTyp Œì : Œì u‚ä¢‚Çú hclose hloopTm : ‚ä•.
Proof.
  have ? := loopFunTyp Œì; apply (iT_All_E (T1 := ‚ä§)), (iT_Sub_nocoerce ùêç);
    tcrush.
Qed.
End loop.

(** * Booleans, Church-encoded. *)
(** Sec. 5 of WadlerFest DOT.
IFTFun ‚â° { if: ‚àÄ(x: {A: ‚ä•..‚ä§})‚àÄ(t: x.A)‚àÄ(f: x.A): x.A }
IFT ‚â° { if: IFTFun }

let boolImplV =
ŒΩ (b: { Boolean: IFT..IFT } ‚àß { true: IFT } ‚àß { false: IFT })
{ Boolean = IFT } ‚àß
{ true = Œª(x: {A: ‚ä•..‚ä§})Œª(t: x.A)Œª(f: x.A)t } ‚àß { false = Œª(x: {A: ‚ä•..‚ä§})Œª(t: x.A)Œª(f: x.A)f }

In fact, that code doesn't typecheck as given, and we fix it by setting.

IFT ‚â° IFTFun
let bool = boolImplV : Œº { Boolean: IFT..IFT; true : b.Boolean; false : b.Boolean }
 *)
Module Export hBool.
Import hoasNotation.
Definition hIFTBody x : hty := hpv x @; "A" ‚Üí: hpv x @; "A" ‚Üí: hpv x @; "A".
Definition IFTBody := hclose $ hIFTBody hx0.
Definition hIFT : hty :=
  ‚àÄ: x : tparam "A", hIFTBody x.
Definition IFT := hclose hIFT.

(* Definition hIFT : hty := {@ val "if" : hIFTFun }. *)

Definition hiftTrue : hvl := Œª: x, Œª:: t f, htv t.
Definition hiftFalse : hvl := Œª: x, Œª:: t f, htv f.
Definition iftTrue := hclose hiftTrue.
Definition iftFalse := hclose hiftFalse.
End hBool.

Example iftTrueTyp Œì : Œì u‚ä¢‚Çú tv iftTrue : IFT.
Proof. tcrush. var. Qed.
Example iftFalseTyp Œì : Œì u‚ä¢‚Çú tv iftFalse : IFT.
Proof. tcrush. var. Qed.

Definition boolImplV :=
  ŒΩ {@
    type "Boolean" = IFT;
    val "true" = pv iftTrue;
    val "false" = pv iftFalse
  }.

Definition boolImplTConcr : ty :=
  Œº {@
    typeEq "Boolean" IFT;
    val "true" : IFT;
    val "false" : IFT
  }.

Definition p0Bool := p0 @; "Boolean".

(* This type makes "Boolean" nominal by abstracting it. *)
Definition boolImplT : ty :=
  Œº {@
    type "Boolean" >: ‚ä• <: IFT;
    val "true" : TLater p0Bool;
    val "false" : TLater p0Bool
  }.

Example SubIFT_P0Bool Œì : {@
    typeEq "Boolean" IFT;
    val "true" : IFT;
    val "false" : IFT
  }%ty :: Œì u‚ä¢‚Çú IFT, 0 <: p0Bool, 0.
Proof. eapply iSub_Sel''; tcrush. varsub; tcrush. Qed.

Example SubIFT_LaterP0Bool' Œì : {@
    typeEq "Boolean" IFT;
    val "true" : IFT;
    val "false" : IFT
  }%ty :: Œì u‚ä¢‚Çú IFT, 0 <: ‚ñ∂: p0Bool, 0.
Proof. ettrans; first exact: SubIFT_P0Bool. tcrush. Qed.

Example SubIFT_LaterP0Bool Œì : (‚ñ∂: {@
    typeEq "Boolean" IFT;
    val "true" : ‚ñ∂: p0Bool;
    val "false" : ‚ñ∂: p0Bool
  })%ty :: Œì u‚ä¢‚Çú IFT, 0 <: ‚ñ∂: p0Bool, 0.
Proof.
  asideLaters.
  ettrans; first (apply (iSub_AddI _ _ 1); tcrush).
  eapply iSub_Sel''; tcrush.
  varsub; tcrush.
Qed.

Example boolImplTypConcr Œì :
  Œì u‚ä¢‚Çú tv boolImplV : boolImplTConcr.
Proof. tcrush; by [apply (iD_Typ_Abs IFT); tcrush | var]. Qed.

Example boolImplTyp Œì :
  Œì u‚ä¢‚Çú tv boolImplV : boolImplT.
Proof.
  apply (iT_Sub_nocoerce boolImplTConcr); first by apply boolImplTypConcr.
  tcrush; rewrite iterate_0; ltcrush; apply SubIFT_LaterP0Bool'.
Qed.

Module Export hBoolSing.
Import hoasNotation.
Definition hIFTGenT hres : hty :=
  ‚àÄ: x : tparam "A", ‚àÄ: t : hpv x @; "A", ‚àÄ: f: hpv x @; "A", hres t f.

Definition hIFTFalseT : hty := hIFTGenT (Œª t f, hTSing (hpv f)).
Definition hIFTTrueT : hty := hIFTGenT (Œª t f, hTSing (hpv t)).

Example iftTrueSingTyp Œì : Œì u‚ä¢‚Çú tv iftTrue : hclose hIFTTrueT.
Proof.
  tcrush; cbv.
  eapply (iT_Path (p := pv _)), iP_Sngl_Refl.
  typconstructor; var.
Qed.

Example iftFalseSingTyp Œì : Œì u‚ä¢‚Çú tv iftFalse : hclose hIFTFalseT.
Proof.
  tcrush; cbv.
  eapply (iT_Path (p := pv _)), iP_Sngl_Refl.
  typconstructor; var.
Qed.

Lemma hIFTTrueTSub Œì : Œì u‚ä¢‚Çú hclose hIFTTrueT, 0 <: hclose hIFT, 0.
Proof. tcrush; varsub; tcrush. Qed.

Lemma hIFTFalseTSub Œì : Œì u‚ä¢‚Çú hclose hIFTFalseT, 0 <: hclose hIFT, 0.
Proof. tcrush; varsub; tcrush. Qed.

Import DBNotation.

Module AssertPlain.
Definition assertBody e : tm :=
  tskip (tyApp e "A" (‚ä§ ‚Üí: ‚ä§) $: tv x1 $: tv x0).

Import hoasNotation.

Definition hassertFun e :=
  hlett: hsucc := htv (Œª: x, htv x) in:
  hlett: hfail := hloopFunTm in:
  pureS (assertBody e).

Definition hassert e :=
  hassertFun e $: htv (hvnat 0).

Lemma hassertBodyTyp Œì e T :
  T :: Œì u‚ä¢‚Çú e : hclose hIFT ‚Üí
  T :: Œì u‚ä¢‚Çú tv x0 : ‚ä§ ‚Üí: ‚ä§ ‚Üí
  T :: Œì u‚ä¢‚Çú tv x1 : ‚ä§ ‚Üí: ‚ä§ ‚Üí
  T :: Œì u‚ä¢‚Çú assertBody e : ‚ä§ ‚Üí: ‚ä§.
Proof.
  rewrite /assertBody => /= He Hx0 Hx1.
  have Hty: T :: Œì u‚ä¢‚Çú tyApp e "A" (‚ä§ ‚Üí: ‚ä§) :
    hclose (‚ä§ ‚Üí: ‚ä§) ‚Üí: (‚ä§ ‚Üí: ‚ä§) ‚Üí: ‚ñ∂: (‚ä§ ‚Üí: ‚ä§).
  by eapply tyApp_typed; first apply He; intros; simpl; tcrush;
    [eapply iSub_Sel', (path_tp_delay (i := 0))..|
    eapply iSel_Sub, (path_tp_delay (i := 0))];
    try (typconstructor; var); wtcrush.
  move: Hty => /iT_All_Ex /(_ Hx1 _) /iT_All_Ex /(_ Hx0) /= Hty.
  eapply (iT_Sub (i := 1)), Hty; tcrush.
Qed.

Lemma hassertFunTyp Œì e
  (Hty : ((‚ä§ ‚Üí: ‚ä§) :: (‚ä§ ‚Üí: ‚ä§) :: Œì)%ty u‚ä¢‚Çú e : hclose hIFT) :
  Œì u‚ä¢‚Çú hclose (hassertFun e) : ‚ä§ ‚Üí: ‚ä§.
Proof.
  apply iT_Let with (T := (‚ä§ ‚Üí: ‚ä§)%ty); tcrush; first var.
  apply iT_Let with (T := (‚ä§ ‚Üí: ‚ä§)%ty); stcrush.
  by eapply iT_Sub_nocoerce; first apply loopFunTyp; tcrush.
  by apply hassertBodyTyp; tcrush; var.
Qed.

Lemma hassertTyp Œì e
  (Ht : ((‚ä§ ‚Üí: ‚ä§) :: (‚ä§ ‚Üí: ‚ä§) :: Œì)%ty u‚ä¢‚Çú e : hclose hIFT):
  Œì u‚ä¢‚Çú hclose (hassert e) : ‚ä§.
Proof.
  eapply iT_All_E, iT_Sub_nocoerce; first exact: hassertFunTyp; tcrush.
Qed.
End AssertPlain.

Module AssertSingletons.

Definition assertBody e : tm :=
  tyApp e "A" ‚ä§ $: tv x1 $: tv x0.

Import hoasNotation.
Definition hassertFun e :=
  hlett: hsucc := htv (Œª: x, htv x) in:
  hlett: hfail := hloopFunTm in:
  pureS (assertBody e).

Definition hassert e :=
  hassertFun e $: htv (hvnat 0).

Lemma hassertBodyFalseTyp Œì e T :
  T :: Œì u‚ä¢‚Çú e : hclose hIFTFalseT ‚Üí
  T :: Œì u‚ä¢‚Çú tv x0 : ‚ä§ ‚Üí
  T :: Œì u‚ä¢‚Çú tv x1 : ‚ä§ ‚Üí
  T :: Œì u‚ä¢‚Çú assertBody e : TSing (pv x0).
Proof.
  move => /= He Hx0 Hx1.
  have Hty: T :: Œì u‚ä¢‚Çú tyApp e "A" ‚ä§ :
    hclose (‚àÄ: t : ‚ä§, ‚àÄ: f: ‚ä§, hTSing (hpv f)).
  by eapply tyApp_typed; first apply He; intros; tcrush;
    eapply iSub_Sel', (path_tp_delay (i := 0));
    try (typconstructor; var); wtcrush.
  rewrite /assertBody.
  move: Hty => /iT_All_Ex /(_ Hx1 _) /iT_All_Ex /(_ Hx0) /=.
  apply; tcrush.
Qed.

Lemma hassertBodyTrueTyp Œì e T U :
  T :: U :: Œì u‚ä¢‚Çú e : hclose hIFTTrueT ‚Üí
  T :: U :: Œì u‚ä¢‚Çú tv x1 : ‚ä§ ‚Üí
  T :: U :: Œì u‚ä¢‚Çú tv x0 : ‚ä§ ‚Üí
  T :: U :: Œì u‚ä¢‚Çú assertBody e : TSing (pv x1).
Proof.
  move => /= He Hx1 Hx0.
  have Hty: T :: U :: Œì u‚ä¢‚Çú tyApp e "A" ‚ä§ :
    hclose (‚àÄ: t : ‚ä§, ‚àÄ: f: ‚ä§, hTSing (hpv t)).
  by eapply tyApp_typed; first apply He; intros; tcrush;
    eapply iSub_Sel', (path_tp_delay (i := 0));
    try (typconstructor; var); wtcrush.
  rewrite /assertBody.
  move: Hty => /iT_All_Ex /(_ Hx1 _) /iT_All_Ex /(_ Hx0) /=.
  apply; tcrush.
Qed.

Lemma hassertFunTrueTyp Œì e :
  (‚ä§ :: ‚ä§ :: Œì)%ty u‚ä¢‚Çú e : hclose hIFTTrueT ‚Üí
  Œì u‚ä¢‚Çú hclose (hassertFun e) : ‚ä§.
Proof.
  move => /hassertBodyTrueTyp He.
  apply iT_Let with (T := ‚ä§%ty); stcrush. {
    apply (iT_Sub_nocoerce (‚ä§ ‚Üí: ‚ä§)); tcrush; var.
  }
  apply iT_Let with (T := ‚ä§%ty); stcrush. {
    eapply iT_Sub_nocoerce; first apply loopFunTyp; tcrush.
  }
  eapply iT_Sub_nocoerce; first apply He; tcrush; var.
Qed.

Lemma hassertFunFalseTyp Œì e :
  (‚ä§ :: ‚ä§ :: Œì)%ty u‚ä¢‚Çú e : hclose hIFTFalseT ‚Üí
  Œì u‚ä¢‚Çú hclose (hassertFun e) : ‚ä§.
Proof.
  move => /hassertBodyFalseTyp He.
  apply iT_Let with (T := ‚ä§%ty); stcrush. {
    apply (iT_Sub_nocoerce (‚ä§ ‚Üí: ‚ä§)); tcrush; var.
  }
  apply iT_Let with (T := ‚ä§%ty); stcrush. {
    eapply iT_Sub_nocoerce; first apply loopFunTyp; tcrush.
  }
  eapply iT_Sub_nocoerce; first apply He; tcrush; var.
Qed.
End AssertSingletons.

End hBoolSing.

Module Export option.
(*
  Encoding Option. Beware I'm using raw Church-encoded booleans, simply
    because it's easier.
  However, we do export Option as an abstract type.
  type Option = {
    type T
    val isEmpty: Boolean
    val pmatch: [U] => U => (T => U) => U
  }
*)

Import hoasNotation.

(* ‚àÄ x : {type U}, x.U ‚Üí (self.T -> x.U) -> x.U *)
Definition hpmatchT self := ‚àÄ: x : tparam "U", hpv x @; "U" ‚Üí: (hpv self @; "T" ‚Üí: hpv x @; "U") ‚Üí: hpv x @; "U".
Definition hoptionTGen (L U : hty) := Œº: self, {@
  type "T" >: L <: U;
  val "isEmpty" : hIFT;
  val "pmatch" : hpmatchT self
}.

(*
  type None = Option { type T = Nothing }
  val noneV: None = new {
    type T = Nothing
    val isEmpty = true
    val pmatch: [U] => U => (Nothing => U) => U = [U] => (none: U) => (some: T => U) => none
  }
*)
Definition hnoneSingTBody self : hty := {@
  typeEq "T" ‚ä•;
  val "isEmpty" : hIFTTrueT;
  val "pmatch" : hpmatchT self
}.
Definition hnoneSingT := Œº: self, hnoneSingTBody self.

Definition hnoneV := ŒΩ: _, {@
  type "T" = ‚ä•;
  val "isEmpty" = hpv hiftTrue;
  val "pmatch" = hpv (Œª: x, Œª:: none some, htv none)
}.
Definition noneV := hclose hnoneV.

Example noneTypStronger Œì :
  Œì u‚ä¢‚Çú tv noneV : hclose hnoneSingT.
Proof.
  have := iftTrueSingTyp (hclose (‚ñ∂: hnoneSingTBody hx0) :: Œì) =>
    /(iD_Val "isEmpty") ?.
  (* apply iT_Obj_I; last stcrush.
  apply iD_Cons; [tcrush| |tcrush].
  apply iD_Cons; [eauto | |tcrush]. *)
  tcrush; var.
Qed.

(*
  //type Some = Option & { self => val get: self.T }
  type Some = Option & { type T; val get: T }
  def mkSome[S](t: S): Some { type T = S } = new {
    type T = S
    val isEmpty = false
    val get = t
    val pmatch: [U] => U => (T => U) => U = [U] => (none: U) => (some: T => U) => some(get)
  }
*)

Definition hsomeSingT hL hU : hty := Œº: self, {@
  type "T" >: hL <: hU;
  val "isEmpty" : hIFTFalseT;
  val "pmatch" : hpmatchT self;
  val "get" : ‚ñ∂: hpv self @; "T"
}.

Definition hmkSomeTGen res : hty := ‚àÄ: x: tparam "A", (hpv x @; "A" ‚Üí: res (hpv x @; "A") (hpv x @; "A")).

Definition hmkSomeTSing : hty := hmkSomeTGen hsomeSingT.

Definition hmkSome : hvl := Œª: x, Œª:: content, htv $ ŒΩ: self, {@
  type "T" = hpv x @; "A";
  val "isEmpty" = hpv hiftFalse;
  val "pmatch" = hpv (Œª: x, Œª:: none some, htv some $: htskip (htv self @: "get"));
  val "get" = hpv content
}.
Definition mkSome := hclose hmkSome.

Example mkSomeTypStronger Œì :
  Œì u‚ä¢‚Çú tv mkSome : hclose hmkSomeTSing.
Proof.
  evar (Œì' : ctx).
  have := iftFalseSingTyp Œì' => /(iD_Val "isEmpty"); rewrite /Œì' => Hf.
  tcrush; cbv.
  - eapply iT_All_E; first var.
    apply (iT_Sub (i := 1) (T1 := hclose (‚ñ∂: (hp3 @; "T"))%HT)); tcrush.
    varsub; ltcrush.
  - varsub.
    ettrans; first (apply iSub_Add_Later; tcrush).
    asideLaters.
    eapply iSub_Sel''; tcrush.
    varsub; tcrush.
Qed.

Definition hoptionTSing := hTOr hnoneSingT (hsomeSingT ‚ä• ‚ä§).

Definition hoptionModTConcrBody : hty := {@
  typeEq "Option" hoptionTSing;
  val "none" : hnoneSingT;
  val "mkSome" : hmkSomeTSing
}.

Definition hoptionModV := ŒΩ: self, {@
  type "Option" = hoptionTSing;
  val "none" = hpv hnoneV;
  val "mkSome" = hpv hmkSome
}.

(** Rather precise type for [hoptionModV]. *)
Example optionModConcrTyp Œì :
  Œì u‚ä¢‚Çú hclose (htv hoptionModV) : hclose (Œº: _, hoptionModTConcrBody).
Proof.
  set U := hclose (‚ñ∂: hoptionModTConcrBody).
  have := noneTypStronger (U :: Œì).
  have := mkSomeTypStronger (U :: Œì) => /(iD_Val "mkSome") Hs Hn.
  ltcrush.
Qed.

(** Define interface for [hoptionModV]. To rewrite to have abstraction. *)

Definition hoptionT := hoptionTGen ‚ä• ‚ä§.
Definition optionT := hclose hoptionT.

Definition hnoneT self := hTAnd (hpv self @; "Option") {@ typeEq "T" ‚ä•}.

(** Behold here [(optionT & (Œº self, val get: ‚ñ∂: self @; "T")) & { type T = hT } ]. *)
Definition hsomeT self hL hU : hty :=
  hTAnd (hTAnd (hpv self @; "Option") (Œº: self, val "get" : ‚ñ∂: hpv self @; "T"))
    (type "T" >: hL <: hU).
Definition hmkSomeT self : hty := hmkSomeTGen (hsomeT self).

Definition hoptionModTInvBody self : hty := {@
  type "Option" >: ‚ä• <: hoptionTSing;
  val "none" : hnoneT self;
  val "mkSome" : hmkSomeT self
}.

Example optionModInvTyp Œì :
  Œì u‚ä¢‚Çú hclose (htv hoptionModV) : hclose (Œº: self, hoptionModTInvBody self).
Proof.
  eapply iT_Sub_nocoerce; first apply optionModConcrTyp.
  ltcrush; rewrite iterate_0.
  eapply iSub_Sel'; tcrush; varsub; ltcrush.
  all: try eapply iSub_Sel', (path_tp_delay (i := 0));
    try (typconstructor; varsub; ltcrush); wtcrush.
  all: try (ettrans; last eapply iSub_Or2); mltcrush.
Qed.

Definition hoptionModT := Œº: self, {@
  type "Option" >: ‚ä• <: hoptionT;
  val "none" : hnoneT self;
  val "mkSome" : hmkSomeT self
}.

Ltac prepare_lemma L H :=
  let Œì' := fresh "Œì" in
  evar (Œì' : ctx); have := L Œì'; rewrite {}/Œì' => H.

Example optionModTypSub Œì :
  Œì u‚ä¢‚Çú hclose (Œº: self, hoptionModTInvBody self), 0 <: hclose hoptionModT, 0.
Proof. ltcrush; varsub; tcrush. Qed.

Example optionModTyp Œì :
  Œì u‚ä¢‚Çú hclose (htv hoptionModV) : hclose hoptionModT.
Proof. eapply iT_Sub_nocoerce, optionModTypSub; apply optionModInvTyp. Qed.

End option.
